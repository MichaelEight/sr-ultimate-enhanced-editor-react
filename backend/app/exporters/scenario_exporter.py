# scenario_exporter.py

import os
from ..config import Config
from pathlib import Path    
from ..utils.logging_utils import add_to_log, LogLevel

def export_scenario_file(scenario_data, settings_data, output_file_path):
    """
    Export the scenario data and settings data to a .scenario file at the specified output_file_path.
    """
    # Start building the .scenario content
    scenario_output = "// SCENARIO DEFINITION - {}\n".format(scenario_data.get('scenario', ['Unnamed'])[0])
    scenario_output += "// Generated by scenario_exporter\n"
    scenario_output += "// ifset key: 0x01: Load CVP; 0x02: Load Rest of Source; 0x03: Load all; 0x04: Load Cache\n\n"

    # Process #ifset 0x01 section
    scenario_output += "#ifset 0x01\n"
    for ext in ['cvp', 'regionincl', 'prf']:
        for filename in scenario_data.get(ext, []):
            dir_path = get_directory_for_extension(ext)
            # Append the extension to the filename
            full_filename = f"{filename}.{ext.upper()}"
            scenario_output += '#include "{}", "{}"\n'.format(full_filename, dir_path)
    scenario_output += "#endifset\n\n"

    # Process #ifset 0x02 section
    scenario_output += "#ifset 0x02\n"
    for ext in ['unit', 'pplx', 'ttrx', 'terx', 'wmdata', 'newsitems']:
        for filename in scenario_data.get(ext, []):
            dir_path = get_directory_for_extension(ext)
            # Append the extension to the filename
            full_filename = f"{filename}.{ext.upper()}"
            scenario_output += '#include "{}", "{}"\n'.format(full_filename, dir_path)
    scenario_output += '#include "AllSourceLoad.INI", "INI\\"' + "\n"
    scenario_output += "#endifset\n\n"

    # Process #ifset 0x02 continued (This seems like an additional block; likely unintended)
    # To fix, we need to check if this block should be part of the previous #ifset or a new one.
    # Assuming it's intended to be part of #ifset 0x02, we'll remove the new #ifset
    scenario_output += "&&MAP\n"
    if scenario_data.get('mapx', []):
        map_name = os.path.splitext(scenario_data['mapx'][0])[0]
        scenario_output += 'mapfile "{}"\n'.format(map_name)
    scenario_output += "&&END\n\n"

    # Continue with other includes without opening a new #ifset 0x02
    for ext in ['oof']:
        for filename in scenario_data.get(ext, []):
            dir_path = get_directory_for_extension(ext)
            # Append the extension to the filename
            full_filename = f"{filename}.{ext.upper()}"
            scenario_output += '#include "{}", "{}"\n'.format(full_filename, dir_path)
    scenario_output += '#include "AllLoad.INI", "INI\\"' + "\n"
    for ext in ['oob']:
        for filename in scenario_data.get(ext, []):
            dir_path = get_directory_for_extension(ext)
            # Append the extension to the filename
            full_filename = f"{filename}.{ext.upper()}"
            scenario_output += '#include "{}", "{}"\n'.format(full_filename, dir_path)
    # Removed the extra #endifset
    # scenario_output += "#endifset\n\n"

    # Process #ifset 0x04 section
    scenario_output += "#ifset 0x04\n"
    scenario_output += "&&SAV\n"
    if scenario_data.get('sav', []):
        sav_name = os.path.splitext(scenario_data['sav'][0])[0]
        scenario_output += 'savfile "{}"\n'.format(sav_name)
    scenario_output += "&&END\n"
    scenario_output += "#endifset\n\n"

    # Process &&GMC section
    scenario_output += "&&GMC\n"
    for key, value in settings_data.items():
        line = format_gmc_line(key, value)
        scenario_output += line
    scenario_output += "&&END\n"

    # Write to file
    with open(output_file_path, 'w') as output_file:
        output_file.write(scenario_output)
    add_to_log(f"Scenario file has been generated at {output_file_path}.", LogLevel.INFO)


def get_directory_for_extension(ext):
    """
    Get the directory path for a given file extension, as per the default project file structure.
    Ensures consistent use of backslashes and uppercase directories.
    """
    default_structure = Config.DEFAULT_PROJECT_FILE_STRUCTURE
    if ext in default_structure:
        dir_path = default_structure[ext]['dir']
        # Normalize path to use backslashes and uppercase directory names
        normalized_path = Path(dir_path).as_posix().replace('/', '\\').upper()
        if not normalized_path.endswith('\\'):
            normalized_path += '\\'
        return normalized_path
    else:
        return ''


def format_gmc_line(key, value):
    """
    Format a line for the GMC section.
    """
    line = f"{key}:\t\t\t"
    if isinstance(value, list):
        value_str = ", ".join([str(v) if v is not None else '' for v in value])
        line += f"{value_str}\n"
    else:
        line += f"{value}\n"
    return line

# Example usage (uncomment to test):
# if __name__ == "__main__":
#     scenario_data = {
#         "scenario": ["FourIslands.Scenario"],
#         "cvp": ["FourIslands.CVP"],
#         "regionincl": ["FourIslands.REGIONINCL"],
#         "prf": ["DEFAULT.PRF"],
#         "unit": ["DEFAULT.UNIT"],
#         "pplx": ["DEFAULT.PPLX"],
#         "ttrx": ["DEFAULT.TTRX"],
#         "terx": ["DEFAULT.TERX"],
#         "wmdata": ["DEFAULT.WMData"],
#         "newsitems": ["DEFAULT.NEWSITEMS"],
#         "mapx": ["FourIslands.MAPX"],
#         "oof": ["FourIslands.OOF"],
#         "oob": ["FourIslands.OOB"],
#         "sav": ["FourIslands.SAV"]
#     }
#     settings_data = {
#         # Populate with your settings data
#     }
#     export_scenario(scenario_data, settings_data, 'output.scenario')
